import os
import logging
import requests
from flask import Flask, request
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.environ.get("BOT_TOKEN")
WEBHOOK_SECRET = os.environ.get("WEBHOOK_SECRET")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")  # https://web-production-....railway.app

app = Flask(__name__)
application = Application.builder().token(BOT_TOKEN).build()

user_orders = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton("üõí –ó–∞–∫–∞–∑–∞—Ç—å –∫–∞–ª—å—è–Ω")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç üëã! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∑–∞–∫–∞–∑–∞—Ç—å –∫–∞–ª—å—è–Ω —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø–æ –ú–∏–Ω—Å–∫—É.\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üëá",
        reply_markup=reply_markup
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id
    state = user_orders.get(user_id, {}).get("step")

    if text == "üõí –ó–∞–∫–∞–∑–∞—Ç—å –∫–∞–ª—å—è–Ω":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–ª—å—è–Ω:\n1. DarkSide üçá ‚Äì 40 BYN\n2. MustHave üçã ‚Äì 35 BYN")
        user_orders[user_id] = {"step": "choosing_hookah"}
    elif state == "choosing_hookah":
        user_orders[user_id]["hookah"] = text
        user_orders[user_id]["step"] = "address"
        await update.message.reply_text("–£–∫–∞–∂–∏ –∞–¥—Ä–µ—Å (—Ç–æ–ª—å–∫–æ –ú–∏–Ω—Å–∫):")
    elif state == "address":
        if "–º–∏–Ω—Å–∫" not in text.lower():
            await update.message.reply_text("–î–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ –ø–æ –ú–∏–Ω—Å–∫—É. –í–≤–µ–¥–∏ –º–∏–Ω—Å–∫–∏–π –∞–¥—Ä–µ—Å.")
            return
        user_orders[user_id]["address"] = text
        user_orders[user_id]["step"] = "time"
        await update.message.reply_text("–£–∫–∞–∂–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:")
    elif state == "time":
        user_orders[user_id]["time"] = text
        user_orders[user_id]["step"] = "phone"
        await update.message.reply_text("–û—Å—Ç–∞–≤—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üìû:")
    elif state == "phone":
        user_orders[user_id]["phone"] = text
        order = user_orders[user_id]
        summary = (
            f"‚úÖ –ó–∞–∫–∞–∑:\n"
            f"‚Ä¢ –ö–∞–ª—å—è–Ω: {order['hookah']}\n"
            f"‚Ä¢ –ê–¥—Ä–µ—Å: {order['address']}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {order['time']}\n"
            f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}"
        )
        await update.message.reply_text(summary)
        user_orders[user_id]["step"] = "done"
    else:
        await update.message.reply_text("–ù–∞–∂–º–∏ üõí –ó–∞–∫–∞–∑–∞—Ç—å –∫–∞–ª—å—è–Ω, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

# === Handlers ===
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# === Flask Webhook ===
@app.route(f"/{WEBHOOK_SECRET}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)
    application.update_queue.put_nowait(update)
    return "ok"

@app.route("/", methods=["GET"])
def index():
    return "Bot is running."

# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ===
if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–æ–≤–∏–º webhook –≤—Ä—É—á–Ω—É—é
    url = f"{WEBHOOK_URL}/{WEBHOOK_SECRET}"
    set_webhook_url = f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook"
    r = requests.post(set_webhook_url, json={
        "url": url,
        "secret_token": WEBHOOK_SECRET
    })
    print("Webhook setup response:", r.text)

    # –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 8080)))
