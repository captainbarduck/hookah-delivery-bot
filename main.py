import os
from flask import Flask, request
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters

TOKEN = os.environ.get("BOT_TOKEN")
WEBHOOK_SECRET = os.environ.get("WEBHOOK_SECRET")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä, https://your-bot.up.railway.app

app = Flask(__name__)

# In-memory storage (–∑–∞–º–µ–Ω–∏ –Ω–∞ –ë–î –≤ –±—É–¥—É—â–µ–º)
user_orders = {}

# Telegram App init
application = Application.builder().token(TOKEN).build()

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton("üõí –ó–∞–∫–∞–∑–∞—Ç—å –∫–∞–ª—å—è–Ω")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç üëã! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∑–∞–∫–∞–∑–∞—Ç—å –∫–∞–ª—å—è–Ω —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø–æ –ú–∏–Ω—Å–∫—É.\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üëá",
        reply_markup=reply_markup
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üõí –ó–∞–∫–∞–∑–∞—Ç—å –∫–∞–ª—å—è–Ω":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–ª—å—è–Ω –∏–∑ —Å–ø–∏—Å–∫–∞:\n1. DarkSide Strong üçá ‚Äì 40 BYN\n2. MustHave Citrus üçã ‚Äì 35 BYN\n\n–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        user_orders[update.effective_user.id] = {"step": "choosing_hookah"}
        return

    user_id = update.effective_user.id
    state = user_orders.get(user_id, {}).get("step")

    if state == "choosing_hookah":
        user_orders[user_id]["hookah"] = text
        user_orders[user_id]["step"] = "address"
        await update.message.reply_text("–£–∫–∞–∂–∏ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –ø–æ –ú–∏–Ω—Å–∫—É):")
    elif state == "address":
        if "–º–∏–Ω—Å–∫" not in text.lower():
            await update.message.reply_text("–ú—ã –¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –ú–∏–Ω—Å–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –º–∏–Ω—Å–∫–∏–π –∞–¥—Ä–µ—Å.")
            return
        user_orders[user_id]["address"] = text
        user_orders[user_id]["step"] = "time"
        await update.message.reply_text("–£–∫–∞–∂–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20:00):")
    elif state == "time":
        user_orders[user_id]["time"] = text
        user_orders[user_id]["step"] = "phone"
        await update.message.reply_text("–û—Å—Ç–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üìû:")
    elif state == "phone":
        user_orders[user_id]["phone"] = text
        order = user_orders[user_id]
        summary = (
            f"‚úÖ –¢–≤–æ–π –∑–∞–∫–∞–∑:\n"
            f"‚Ä¢ –ö–∞–ª—å—è–Ω: {order['hookah']}\n"
            f"‚Ä¢ –ê–¥—Ä–µ—Å: {order['address']}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {order['time']}\n"
            f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}\n\n"
            "–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è üôå"
        )
        await update.message.reply_text(summary)
        # –¢—É—Ç –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ context.bot.send_message(chat_id=OWNER_ID, ...)
        user_orders[user_id]["step"] = "done"
    else:
        await update.message.reply_text("–ù–∞–∂–º–∏ üõí –ó–∞–∫–∞–∑–∞—Ç—å –∫–∞–ª—å—è–Ω, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# === Flask Webhook ===
@app.route(f"/{WEBHOOK_SECRET}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)
    application.update_queue.put_nowait(update)
    return "ok"

@app.route("/", methods=["GET"])
def index():
    return "Bot is running."

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
    webhook_url = f"{WEBHOOK_URL}/{WEBHOOK_SECRET}"
    application.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8080)),
	webhook_url=f"{WEBHOOK_URL}/{WEBHOOK_SECRET}",
        secret_token=WEBHOOK_SECRET,
    )
