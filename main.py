import os
import logging
from flask import Flask, request
from dotenv import load_dotenv
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters

load_dotenv()

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.environ.get("BOT_TOKEN")
WEBHOOK_SECRET = os.environ.get("WEBHOOK_SECRET")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")

app = Flask(__name__)

# Initialize this later based on mode
application = None

user_orders = {}

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton("üõí –ó–∞–∫–∞–∑–∞—Ç—å –∫–∞–ª—å—è–Ω")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç üëã! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∑–∞–∫–∞–∑–∞—Ç—å –∫–∞–ª—å—è–Ω —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø–æ –ú–∏–Ω—Å–∫—É.\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üëá",
        reply_markup=reply_markup
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id

    if text == "üõí –ó–∞–∫–∞–∑–∞—Ç—å –∫–∞–ª—å—è–Ω":
        user_orders[user_id] = {"step": "choosing_hookah"}
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–ª—å—è–Ω:\n1. DarkSide Strong üçá ‚Äì 40 BYN\n2. MustHave Citrus üçã ‚Äì 35 BYN")
        return

    state = user_orders.get(user_id, {}).get("step")
    if state == "choosing_hookah":
        user_orders[user_id]["hookah"] = text
        user_orders[user_id]["step"] = "address"
        await update.message.reply_text("–£–∫–∞–∂–∏ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –ø–æ –ú–∏–Ω—Å–∫—É):")
    elif state == "address":
        if "–º–∏–Ω—Å–∫" not in text.lower():
            await update.message.reply_text("–ú—ã –¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –ú–∏–Ω—Å–∫—É.")
            return
        user_orders[user_id]["address"] = text
        user_orders[user_id]["step"] = "time"
        await update.message.reply_text("–£–∫–∞–∂–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20:00):")
    elif state == "time":
        user_orders[user_id]["time"] = text
        user_orders[user_id]["step"] = "phone"
        await update.message.reply_text("–û—Å—Ç–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üìû:")
    elif state == "phone":
        user_orders[user_id]["phone"] = text
        order = user_orders[user_id]
        await update.message.reply_text(
            f"‚úÖ –¢–≤–æ–π –∑–∞–∫–∞–∑:\n"
            f"‚Ä¢ –ö–∞–ª—å—è–Ω: {order['hookah']}\n"
            f"‚Ä¢ –ê–¥—Ä–µ—Å: {order['address']}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {order['time']}\n"
            f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}\n\n"
            "–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π üôå"
        )
        user_orders[user_id]["step"] = "done"
    else:
        await update.message.reply_text("–ù–∞–∂–º–∏ üõí –ó–∞–∫–∞–∑–∞—Ç—å –∫–∞–ª—å—è–Ω, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

@app.route(f"/{WEBHOOK_SECRET}", methods=["POST"])
async def webhook():
    if request.headers.get('X-Telegram-Bot-Api-Secret-Token') != WEBHOOK_SECRET:
        return 'Unauthorized', 401
    
    update = Update.de_json(request.get_json(force=True), application.bot)
    await application.process_update(update)
    return "ok"

@app.route("/")
def index():
    return "Bot is running"

def init_application():
    """Initialize application with handlers"""
    global application
    
    # === Handlers ===
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

if __name__ == "__main__":
    if not WEBHOOK_URL:
        print("WEBHOOK_URL not set, running in polling mode...")
        application = (
            Application.builder()
            .token(BOT_TOKEN)
            .build()
        )
        init_application()
        application.run_polling()
    else:
        # Initialize application for webhook mode
        application = (
            Application.builder()
            .token(BOT_TOKEN)
            .updater(None)  # Disable updater since we're using webhooks
            .build()
        )
        init_application()
        
        # Set webhook
        import requests
        webhook_url = f"{WEBHOOK_URL}/{WEBHOOK_SECRET}"
        result = requests.post(
            f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook",
            json={
                "url": webhook_url,
                "secret_token": WEBHOOK_SECRET
            }
        )
        print(f"Webhook set: {result.json()}")
        
        # Run Flask
        port = int(os.environ.get("PORT", 8443))
        app.run(host="0.0.0.0", port=port)
